# üöÄ Roundtable Billing Dashboard - Environment Variables Template
# Copy this file to .env and fill in your actual values
# For detailed setup instructions, see docs/SETUP.md

# ================================================================
# üõ†Ô∏è APPLICATION SETTINGS
# ================================================================
NODE_ENV=development
NEXTJS_ENV=development

# Node.js and Package Manager versions (for consistency across team)
# Download Node.js from: https://nodejs.org/
NODE_VERSION=22.14.0
# Install pnpm: npm install -g pnpm
PNPM_VERSION=10.10.0

# Application URLs and configuration
NEXT_PUBLIC_APP_URL=http://localhost:3000
NEXT_PUBLIC_WEBAPP_ENV=local
NEXT_PUBLIC_MAINTENANCE=false
NEXT_PUBLIC_R2_PUBLIC_URL=http://localhost:3000/uploads

# ================================================================
# üîê AUTHENTICATION (Better Auth)
# ================================================================
# Generate a secure random string (32+ characters) for production
# You can use: openssl rand -base64 32
BETTER_AUTH_SECRET=your-secret-key-here-change-in-production
BETTER_AUTH_URL=http://localhost:3000

# ================================================================
# üîó SUPABASE INTEGRATION (For SSO from Roundtable)
# ================================================================
# Supabase configuration for validating JWT tokens from Roundtable project
# Also used for direct integration to update user plans after successful payments
# Get these from: https://app.supabase.com/project/zrldjcsfobgfagijwkwk/settings/api
NEXT_PUBLIC_SUPABASE_URL=https://zrldjcsfobgfagijwkwk.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key-here
# Get the JWT secret from: https://app.supabase.com/project/zrldjcsfobgfagijwkwk/settings/api
# It's under "JWT Settings" -> "JWT Secret" (copy the full secret)
# CRITICAL: This must be set for SSO authentication to work
SUPABASE_JWT_SECRET=your-supabase-jwt-secret-here

# ================================================================
# üîó ROUNDTABLE1 INTEGRATION (Cross-project database communication)
# ================================================================
# Dedicated Supabase configuration for updating Roundtable1 user plans
# These should be the same as the main Roundtable1 project's Supabase config
# Get these from the Roundtable1 project's Supabase settings
ROUNDTABLE_SUPABASE_URL=https://zrldjcsfobgfagijwkwk.supabase.co
ROUNDTABLE_SUPABASE_SERVICE_KEY=your-roundtable-service-role-key-here

# Roundtable application URL for redirects after successful subscription
# Used when redirecting users back to Roundtable after plan activation
NEXT_PUBLIC_ROUNDTABLE_APP_URL=https://roundtable.now

# üåê Google OAuth (Optional but recommended)
# Get credentials from: https://console.cloud.google.com/
# 1. Create a new project or select existing
# 2. Enable Google+ API
# 3. Create OAuth 2.0 Client IDs
# 4. Add http://localhost:3000/auth/google/callback to authorized redirect URIs
AUTH_GOOGLE_ID=your-google-client-id.apps.googleusercontent.com
AUTH_GOOGLE_SECRET=your-google-client-secret

# ================================================================
# üìß EMAIL (AWS SES)
# ================================================================
# Get AWS SES credentials from: https://console.aws.amazon.com/ses/
# 1. Verify your sending domain/email
# 2. Create IAM user with SES permissions
# 3. Generate access keys
AWS_SES_ACCESS_KEY_ID=your-aws-ses-access-key
AWS_SES_SECRET_ACCESS_KEY=your-aws-ses-secret-key
NEXT_PUBLIC_AWS_SES_REGION=us-east-1
NEXT_PUBLIC_FROM_EMAIL=noreply@roundtable.now
NEXT_PUBLIC_SES_REPLY_TO_EMAIL=support@roundtable.now
NEXT_PUBLIC_SES_VERIFIED_EMAIL=noreply@roundtable.now

# ================================================================
# üí≥ ZARINPAL PAYMENT GATEWAY (Iranian Payment Gateway)
# ================================================================
# CRITICAL: Replace with real credentials from https://next.zarinpal.com/panel/
# 1. Register/Login to ZarinPal
# 2. Complete merchant verification process (required for production)
# 3. Get Merchant ID and Access Token from API section
# 4. IMPORTANT: Enable "Direct Payment (Payman)" feature by submitting a support ticket
# 
# SECURITY WARNING: These are development/sandbox values - replace with real credentials in production
# For development: These UUID-format values will pass validation but fail at API level (expected behavior)
# For production: Get real credentials from https://next.zarinpal.com/panel/
NEXT_PUBLIC_ZARINPAL_MERCHANT_ID=36e0ea98-43fa-400d-a421-f7593b1c73bc
ZARINPAL_ACCESS_TOKEN=zp-sandbox-access-token

# Direct Debit (Payman) Configuration
# Direct debit requires special activation from ZarinPal support
# Submit ticket to enable: https://next.zarinpal.com/panel/tickets
# Documentation: https://docs.zarinpal.com/paymentGateway/directPayment.html

# Default contract limits (aligned with ZarinPal Payman API documentation)
# See: https://docs.zarinpal.com/paymentGateway/directPayment.html
NEXT_PUBLIC_ZARINPAL_DEFAULT_CONTRACT_DURATION_DAYS=365
# Based on Saman Bank limits: max 25 daily transactions  
NEXT_PUBLIC_ZARINPAL_DEFAULT_MAX_DAILY_COUNT=25
# Reasonable monthly limit: 750 transactions (25 * 30)
NEXT_PUBLIC_ZARINPAL_DEFAULT_MAX_MONTHLY_COUNT=750
# Based on bank limits: 100,000,000 IRR (100M IRR ~ $2,380 USD)
NEXT_PUBLIC_ZARINPAL_DEFAULT_MAX_AMOUNT=100000000

# ZarinPal Direct Debit callback URL (for contract signing)
NEXT_PUBLIC_ZARINPAL_PAYMAN_CALLBACK_URL=http://localhost:3000/api/webhooks/zarinpal/payman

# Legacy card verification settings (deprecated - use direct debit instead)
NEXT_PUBLIC_CARD_VERIFICATION_AMOUNT=1000
NEXT_PUBLIC_CARD_VERIFICATION_DESCRIPTION=Roundtable billing verification

# ================================================================
# üõ°Ô∏è SECURITY & CAPTCHA
# ================================================================
# Cloudflare Turnstile (free alternative to reCAPTCHA)
# Get keys from: https://dash.cloudflare.com/
# 1. Go to Turnstile section
# 2. Create a new site
# 3. Add your domain (use localhost:3001 for dev)
# For development, you can use these test keys:
NEXT_PUBLIC_TURNSTILE_SITE_KEY=1x00000000000000000000AA
TURNSTILE_SECRET_KEY=1x0000000000000000000000000000000AA

# Signed URL Secret (generate random string for security)
# Used for creating secure, time-limited URLs
# Generate with: openssl rand -base64 32
SIGNED_URL_SECRET=your-signed-url-secret


# ================================================================
# üóÑÔ∏è DATABASE
# ================================================================
# Local SQLite for development (no setup required)
DATABASE_URL=file:./local.db

# For production, use Cloudflare D1 or other providers
# DATABASE_URL=your-production-database-url

# ================================================================
# ‚òÅÔ∏è CLOUDFLARE (Production Deployment)
# ================================================================
# Get from: https://dash.cloudflare.com/
# Account ID: Found in right sidebar of Cloudflare dashboard
CLOUDFLARE_ACCOUNT_ID=your-cloudflare-account-id

# Cloudflare API Token (for Wrangler CLI)
# Generate from: https://dash.cloudflare.com/profile/api-tokens
# Required permissions: Zone:Edit, Account:Edit, Worker:Edit, D1:Edit (FULL ACCESS TOKEN)
CLOUDFLARE_API_TOKEN=your-cloudflare-api-token-with-full-access

# D1 Database token (for Cloudflare D1 database)
# Generate from: API Tokens section with D1 permissions
# Note: You can use the same API token as CLOUDFLARE_API_TOKEN if it has D1 permissions
D1_TOKEN=your-cloudflare-api-token-with-full-access

# Database IDs for different environments
# Create D1 databases: wrangler d1 create your-database-name
PREVIEW_DATABASE_ID=your-preview-database-id
PROD_DATABASE_ID=your-production-database-id

# ================================================================
# üîó WEBHOOKS & API KEYS
# ================================================================
# Webhook Configuration (for sending events to your platform)
# WEBHOOK_URL: Your endpoint that receives webhook events
# WEBHOOK_SECRET: Secret key for signing webhook payloads (generate with: openssl rand -base64 32)
# Use webhook.site for testing or your production webhook endpoint
NEXT_PUBLIC_WEBHOOK_URL=http://localhost:3000/api/webhooks/zarinpal
WEBHOOK_SECRET=your-webhook-secret-key-change-in-production

# API Key Configuration (for external API access)
# API_MASTER_KEY: Master key for admin/owner level access to all data
# Generate with: openssl rand -base64 32
API_MASTER_KEY=your-api-master-key-change-in-production

# External webhook URL for integrations
NEXT_PUBLIC_EXTERNAL_WEBHOOK_URL=http://localhost:3000/api/webhooks/external

# ================================================================
# üèóÔ∏è DEVELOPMENT NOTES
# ================================================================
# - For first-time setup, you only need to set NODE_ENV and DATABASE_URL
# - Other variables can be configured as needed for specific features
# - See docs/SETUP.md for detailed step-by-step instructions
# - Use .env.local for local overrides that shouldn't be committed