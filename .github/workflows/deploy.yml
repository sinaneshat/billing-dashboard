name: üöÄ Deploy to Cloudflare Workers

on:
  push:
    branches: [main, preview]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: 22.14.0
  PNPM_VERSION: 10.11.0

jobs:
  # ================================================================
  # üß™ QUALITY CHECKS
  # ================================================================
  quality:
    name: üîç Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Type check
        run: pnpm check-types

      - name: üîç Lint check
        run: pnpm lint

      - name: üß™ Run tests
        run: pnpm test:run

      - name: üîê Security audit
        run: pnpm audit --audit-level moderate

  # ================================================================
  # üèóÔ∏è BUILD AND DEPLOY
  # ================================================================
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name == 'push'
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'preview' }}
      url: ${{ steps.deploy.outputs.deployment-url }}

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üèóÔ∏è Generate Cloudflare types
        run: pnpm cf-typegen
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: üèóÔ∏è Build application
        run: pnpm build:worker
        env:
          NEXT_PUBLIC_WEBAPP_ENV: ${{ github.ref_name == 'main' && 'prod' || 'preview' }}

      - name: üóÑÔ∏è Run database migrations
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            pnpm db:migrate:prod
          else
            pnpm db:migrate:preview
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: üöÄ Deploy to Cloudflare Workers
        id: deploy
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            pnpm deploy:production
            echo "deployment-url=https://billing-dashboard-production.workers.dev" >> $GITHUB_OUTPUT
          else
            pnpm deploy:preview
            echo "deployment-url=https://billing-dashboard-preview.workers.dev" >> $GITHUB_OUTPUT
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: üìä Deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.ref_name == 'main' && 'Production' || 'Preview' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  # ================================================================
  # üß™ POST-DEPLOYMENT HEALTH CHECKS
  # ================================================================
  health-check:
    name: üè• Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push'

    steps:
      - name: üè• Check deployment health
        run: |
          URL="${{ needs.deploy.outputs.deployment-url || (github.ref_name == 'main' && 'https://billing-dashboard-production.workers.dev' || 'https://billing-dashboard-preview.workers.dev') }}"

          # Wait for deployment to be ready
          sleep 30

          # Basic health check
          if curl -f -s "$URL/api/health" > /dev/null; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            exit 1
          fi

          # Performance check (should respond within 2 seconds)
          RESPONSE_TIME=$(curl -o /dev/null -s -w '%{time_total}' "$URL")
          if (( $(echo "$RESPONSE_TIME < 2" | bc -l) )); then
            echo "‚úÖ Performance check passed ($RESPONSE_TIME seconds)"
          else
            echo "‚ö†Ô∏è Performance check warning: slow response ($RESPONSE_TIME seconds)"
          fi

      - name: üìä Health check summary
        if: always()
        run: |
          echo "## üè• Health Check Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL Checked**: ${{ needs.deploy.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
